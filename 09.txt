2025년 상반기 K-디지털 트레이닝
[KB] IT’s Your Life1 자바스크립트 기본 용어와 출력 방법
Ⅰ
HTMLPage.html
<!DOCTYPE html>
<html>
<head>
<title>JavaScript Basic</title>
<script>
</script>
</head>
<body>
</body>
</html>
21 자바스크립트 기본 용어와 출력 방법
Ⅰ
자바스크립트 기본 용어
 표현식: 값을 만들어 내는 간단한 코드.
 문장: 프로그래밍 언어에 실행할 수 있는 코드의 최소 단위.
 문장 마지막에 세미콜론(;) 또는 줄 바꿈을 넣어 종결을 나타냄.
31 자바스크립트 기본 용어와 출력 방법
Ⅰ
자바스크립트 기본 용어
 자바스크립트를 처음 만들 때 정해진 특별한 의미가 부여된 단어
41 자바스크립트 기본 용어와 출력 방법
Ⅰ
자바스크립트 기본 용어
 자바스크립트에서 변수나 함수 등에 이름을 붙일 때 사용하는 단어
51 자바스크립트 기본 용어와 출력 방법
Ⅰ
자바스크립트 기본 용어
61 자바스크립트 기본 용어와 출력 방법
Ⅰ
자바스크립트 기본 용어
<script>
// 주석은 코드 실행에 영향을 주지 않습니다.
/*
alert('Hello JavaScript .. !');
alert('Hello JavaScript .. !');
alert('Hello JavaScript .. !');
*/
</script>
71 자바스크립트 기본 용어와 출력 방법
Ⅰ
자바스크립트 출력
81 자바스크립트 기본 용어와 출력 방법
Ⅰ
output_alert.html
<!DOCTYPE html>
<html>
<head>
<title>JavaScript Basic</title>
<script>
alert('Hello JavaScript .. !');
</script>
</head>
<body>
</body>
</html>
91 자바스크립트 기본 용어와 출력 방법
Ⅰ
자바스크립트 출력
console.log("Hello World…!")
102 자료형과 변수
Ⅰ
자료형
 정수, 실수
숫자를 0으로 나누었을 때,
무한을 나타내는 값이 됨.
부동소수점을 계산할 때
약간의 오차 발생.
112 자료형과 변수
Ⅰ
자료형
 나머지 연산자
122 자료형과 변수
Ⅰ
자료형
 문자 집합
132 자료형과 변수
Ⅰ
자료형
 이스케이프 문자
142 자료형과 변수
Ⅰ
자료형
 문자열 연결 연산자
152 자료형과 변수
Ⅰ
자료형
 true/false 값 중 하나를 가짐
 비교 연산자
162 자료형과 변수
Ⅰ
자료형
 논리 연산자
둘 다 참일 때만 참.
20이 10과 30 사이에
있다는 의미
172 자료형과 변수
Ⅰ
자료형
 논리 연산자
둘 중 하나만
참이어도 참.
182 자료형과 변수
Ⅰ
변수
 변수 선언
 변수에 값을 할당
① > let pi; // 변수 선언
undefined
② > pi = 3.14159265; // 값 할당
undefined
 변수 초기화
> let pi = 3.14159265;
undefined
192 자료형과 변수
Ⅰ
변수
202 자료형과 변수
Ⅰ
variable_use.html 변수
<script>
// 변수를 선언 및 초기화합니다.
let radius = 10;
let pi = 3.14159265;
// 출력합니다.
alert(2 * radius * pi);
</script>
212 자료형과 변수
Ⅰ
변수
let a = 10
const b = 10
<script>
// radius와 pi가 이후로 바뀌지 않으므로
// let을 const로 변경합니다.
const radius = 10;
const pi = 3.14159265;
alert(2 * radius * pi)
</script>
223 조건문과 반복문
Ⅰ
조건문
233 조건문과 반복문
Ⅰ
condition_basic.html if 문으로 참과 거짓 판별
<script>
// 조건문
if (273 < 52) {
// 표현식 "273 < 52"가 참일 때 실행합니다.
alert("273 < 52 => true");
}
// 프로그램 종료
alert("프로그램 종료");
</script>
243 조건문과 반복문
Ⅰ
condition_getDate.html 현재 시간 구하기
<script>
// Date 객체를 선언합니다.
let date = new Date();
// 요소를 추출합니다.
let year = date.getFullYear();
getMonth()는 0부터 시작.
let month = date.getMonth() + 1;
우리에게 익숙한 월 표현으로
let day = date.getDay();
변경하기 위해 1씩 더함.
let hours = date.getHours();
let minutes = date.getMinutes();
let seconds = date.getSeconds();
</script>
253 조건문과 반복문
Ⅰ
condition_date.html if 조건문으로 오전 오후 판별
<script>
// Date 객체를 선언합니다: 현재 시간 측정
let date = new Date();
let hours = date.getHours();
// 조건문
if (hours < 12) {
// 표현식 "hours < 12"가 참일 때 실행합니다.
alert('오전입니다.');
}
if (12 <= hours) {
// 표현식 "12 <= hours"가 참일 때 실행합니다.
alert('오후입니다.');
}
</script>
263 조건문과 반복문
Ⅰ
조건문
273 조건문과 반복문
Ⅰ
condition_else.html if else 조건문으로 오전과 오후 판별
<script>
// Date 객체를 선언합니다: 현재 시간 측정
let date = new Date();
let hours = date.getHours();
// 조건문
if (hours < 12) {
// 표현식 "hours < 12"가 참일 때 실행합니다.
alert('오전입니다.');
} else {
// 표현식 "12 <= hours"가 참일 때 실행합니다.
alert('오후입니다.');
}
</script>
283 조건문과 반복문
Ⅰ
조건문
293 조건문과 반복문
Ⅰ
condition_duplication.html 중첩 조건문으로 하루 일정 표현
<script> // 여러 가지 업무를 수행
// Date 객체를 선언합니다: 현재 시간 측정 }
let date = new Date(); }
let hours = date.getHours(); }
}
// 조건문 }
if (hours < 5) { </script>
alert('잠을 자렴....');
} else {
if (hours < 7) {
alert('준비');
} else {
if (hours < 9) {
alert('출근');
} else {
if (hours < 12) {
alert('빈둥빈둥');
} else {
if (hours < 14) {
alert('식사');
} else {
303 조건문과 반복문
Ⅰ
조건문
313 조건문과 반복문
Ⅰ
condition_ifelseif.html if else if 조건문으로 하루 일정 표현
<script>
// Date 객체를 선언합니다: 현재 시간 측정
let date = new Date();
let hours = date.getHours();
// 조건문
if (hours < 5) {
alert('잠을 자렴....');
} else if (hours < 7) {
alert('준비');
} else if (hours < 9) {
alert('출근');
} else if (hours < 12) {
alert('빈둥빈둥');
} else if (hours < 14) {
alert('식사');
} else {
// 여러 가지 업무를 수행합니다.
}
</script>
323 조건문과 반복문
Ⅰ
note_logic.html 논리 연산자 사용
<script>
// Date 객체를 선언합니다: 현재 시간 측정
let date = new Date();
let month = date.getMonth() + 1;
// 조건문
if (3 <= month && month <= 5) {
alert('봄입니다.');
} else if (6 <= month && month <= 8) {
alert('여름입니다.');
} else if (9 <= month && month <= 11) {
alert('가을입니다.');
} else {
alert('겨울입니다.');
}
</script>
333 조건문과 반복문
Ⅰ
반복문
<script>
alert('출력');
alert('출력');
alert('출력');
alert('출력');
alert('출력');
</script>
<script>
for (let i = 0; i < 1000; i++) {
alert('출력');
}
</script>
343 조건문과 반복문
Ⅰ
반복문
 변수 여러 개를 한꺼번에 다룰 수 있는 자료형.
// 변수를 선언합니다.
let array = [273, 32, 103, 57, 52];
353 조건문과 반복문
Ⅰ
array_basic.html
<script>
// 변수를 선언합니다.
let array = [273, '문자열', true, function () { }, {}, [32, 103]];
alert(array);
</script>
363 조건문과 반복문
Ⅰ
array_index.html 배열 생성과 배열 요소 접근
<script>
// 변수를 선언합니다.
let array = ['가', '나', '다', '라'];
// 배열 요소를 변경합니다.
array[0] = '윤';
// 요소를 출력합니다.
alert(array[0]);
alert(array[1]);
alert(array[2]);
alert(array[3]);
</script>
373 조건문과 반복문
Ⅰ
note_arrayLength.html 배열 요소의 개수
<script>
// 변수를 선언합니다.
let array = [10, 20, 30, 40, 50];
// 출력합니다.
alert(array.length);
</script>
383 조건문과 반복문
Ⅰ
반복문
 불 표현식이 참이면 중괄호 안 문장을 계속 실행.
 조건을 거짓으로 만드는 문장이 없으면 무한 반복.
<script>
// 반복을 수행합니다.
while (true) {
alert('무한 반복');
}
</script>
393 조건문과 반복문
Ⅰ
loop_while.html while 반복문
<script>
// 변수를 선언합니다.
let i = 0;
let array = ['가', '나', '다'];
// 반복을 수행합니다. i가 배열 원소 개수인 3보다 작을 때 반복합니다.
while (i < array.length) {
// 출력합니다.
alert(i + '번째 출력: ' + array[i]);
// 탈출하려고 변수를 더합니다.
i++;
}
</script>
403 조건문과 반복문
Ⅰ
반복문
 원하는 횟수만큼 반복하고 싶을 때 사용
413 조건문과 반복문
Ⅰ
반복문
 for 반복문 단계
① 초기식을 비교합니다.
② 조건식을 비교합니다. 조건이 거짓이면 반복문을 종료합니다.
③ 문장을 실행합니다.
④ 종결식을 실행합니다.
⑤ ➎ 앞의 ➋ 단계로 이동합니다.
for (let i = 0; i < 반복 횟수; i++) {
}
423 조건문과 반복문
Ⅰ
loop_for.html for 반복문
<script>
// 변수를 선언합니다.
let array = ['가', '나', '다'];
// 반복을 수행합니다.
for (let i = 0; i < 3; i++) {
// 출력합니다.
alert(i + '번째 출력: ' + array[i]);
}
</script>
433 조건문과 반복문
Ⅰ
loop_forSum.html for 반복문을 사용한 0부터 100까지 합 계산
<script>
// 변수를 선언합니다.
let output = 0;
// 반복을 수행합니다.
for (let i = 0; i <= 100; i++) {
output += i;
}
// 출력합니다.
alert(output);
</script>
444 함수
Ⅰ
선언과 호출, 실행 우선순위
 함수 생성 방법
454 함수
Ⅰ
function_noname.html 익명 함수 선언하기
<script>
// 함수를 선언합니다.
let 함수 = function () {
alert('함수_01');
alert('함수_02');
};
// 출력합니다.
alert(typeof (함수) + ' : ' + 함수);
</script>
464 함수
Ⅰ
function_name.html 선언적 함수 선언하기
<script>
// 함수를 선언합니다.
function 함수() {
alert('함수_01');
alert('함수_02');
};
// 출력합니다.
alert(typeof (함수) + ' : ' + 함수);
</script>
474 함수
Ⅰ
function_priorityBetweenNoname.html 실행 우선 순위
<script>
// 함수를 선언합니다.
var 함수 = function () { alert('함수_A'); };
var 함수 = function () { alert('함수_B'); };
// 함수를 호출합니다.
함수();
</script>
484 함수
Ⅰ
function_priority.html 실행 우선 순위
<script>
// 함수를 선언합니다.
함수 = function () {
alert('함수_A');
};
function 함수() {
alert('함수_B');
}
// 함수를 호출합니다.
함수();
</script>
494 함수
Ⅰ
매개변수와 반환 값
// 함수를 호출합니다.
alert('매개변수');
let minutes = date.getMinutes();
let seconds = date.getSeconds();
504 함수
Ⅰ
function_return.html매개변수와 반환 값이 있는 함수
<script>
// 함수를 선언합니다.
function f(x) {
return x * x;
}
// 함수를 호출합니다.
alert(f(3));
</script>
514 함수
Ⅰ
function_callback.html 콜백 함수
<script>
// 함수를 선언합니다.
function callTenTimes(callback) {
// 10회 반복합니다.
for (let i = 0; i < 10; i++) {
callback(); // 매개변수로 전달된 함수를 호출합니다.
}
}
// 변수를 선언합니다.
let fun = function () {
alert('함수 호출');
};
// 함수를 호출합니다.
callTenTimes(fun);
</script>
524 함수
Ⅰ
function_nonameCallback.html 콜백함수
<script>
// 함수를 선언합니다.
function callTenTimes(callback) {
for (let i = 0; i < 10; i++) {
callback();
}
}
// 함수를 호출합니다.
callTenTimes(function() {
alert('함수 호출');
});
</script>
535 객체
Ⅰ
객체 개요
545 객체
Ⅰ
객체 개요
<script>
// 객체를 선언합니다.
let product = {
제품명: '7D 건조 망고’,
유형: '당절임’,
성분: '망고, 설탕, 메타중아황산나트륨, 치자황색소’,
원산지: '필리핀’
};
</script>
555 객체
Ⅰ
객체 개요
product['제품명'] → '7D 건조 망고'
product['유형'] → '당절임'
product['성분'] → '망고, 설탕, 메타중아황산나트륨, 치자황색소'
product['원산지'] → '필리핀’
product.제품명 → '7D 건조 망고'
product.유형 → '당절임'
product.성분 → '망고, 설탕, 메타중아황산나트륨, 치자황색소'
product.원산지 → '필리핀'
565 객체
Ⅰ
객체 개요
for (let 키 in 객체) {
문장
}
575 객체
Ⅰ
object_withForIn.html 객체 속성 순회
<script>
// 객체를 선언합니다.
let product = {
제품명: '7D 건조 망고',
유형: '당절임',
성분: '망고, 설탕, 메타중아황산나트륨, 치자황색소',
원산지: '필리핀'
};
// 출력합니다.
for (let i in product) {
alert(i + ':' + product[i]);
}
</script>
585 객체
Ⅰ
속성과 메서드
// 객체를 선언합니다.
let object = {
number: 273,
string: 'rintiantta',
boolean: true,
array: [52, 273, 103, 32],
method: function () {
}
};
595 객체
Ⅰ
속성과 메서드
// 객체를 선언합니다.
let person = {
name: '윤인성',
eat: function (food) {
alert(food + '을/를 먹습니다.');
}
};
// 메서드를 호출합니다.
person.eat('밥');
605 객체
Ⅰ
속성과 메서드
615 객체
Ⅰ
object_this.html
<script>
// 객체를 선언합니다.
let person = {
name: '윤인성',
eat: function (food) {
alert(this.name + '이 ' + food + '을/를 먹습니다.');
}
};
// 메서드를 호출합니다.
person.eat('밥');
</script>
62